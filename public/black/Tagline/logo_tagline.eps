%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.15.5 (Build 19F101) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 1000 563
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 1000 563
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0 0 0 sc
q
749.88342 188.40706 m
753.16211 188.40706 755.8241 185.78413 755.8241 182.50703 c
755.8241 179.22838 753.16211 176.60545 749.88342 176.60545 c
746.60553 176.60545 743.94196 179.22838 743.94196 182.50703 c
743.94196 185.78413 746.60553 188.40706 749.88342 188.40706 c
h
374.68695 188.12155 m
374.80963 188.12155 374.97379 188.08012 375.21997 187.87457 c
378.25244 185.99023 380.95663 183.53143 383.37402 180.37627 c
383.62021 180.048 383.66162 179.92609 383.66162 179.76117 c
383.66162 179.5564 383.5788 179.39305 383.25131 179.10622 c
380.75186 176.9749 l
380.46503 176.72949 380.3009 176.606 380.17819 176.606 c
379.97342 176.606 379.8093 176.68806 379.60452 177.01633 c
377.50497 180.06631 374.83063 182.77161 372.13855 184.6514 c
371.86002 184.8429 l
371.61383 185.00624 371.49036 185.12973 371.49036 185.25165 c
371.49036 185.37514 371.57318 185.49863 371.77719 185.74481 c
374.07263 187.79329 l
374.35947 188.08012 374.56424 188.12155 374.68695 188.12155 c
h
565.17761 188.12155 m
565.30115 188.12155 565.46448 188.08012 565.71063 187.87457 c
568.74237 185.99023 571.44733 183.53143 573.86469 180.37627 c
574.1109 180.048 574.15234 179.92609 574.15234 179.76117 c
574.15234 179.5564 574.06946 179.39305 573.74121 179.10622 c
571.24255 176.9749 l
570.95575 176.72949 570.79236 176.606 570.66809 176.606 c
570.46411 176.606 570.29919 176.68806 570.09442 177.01633 c
567.9964 180.06631 565.32135 182.77161 562.62927 184.6514 c
562.35071 184.8429 l
562.10455 185.00624 561.98102 185.12973 561.98102 185.25165 c
561.98102 185.37514 562.0639 185.49863 562.26788 185.74481 c
564.56256 187.79329 l
564.84937 188.08012 565.05414 188.12155 565.17761 188.12155 c
h
456.28574 199.75809 m
458.29355 199.55331 459.35883 199.38997 460.75235 198.97966 c
461.12048 198.8968 461.32602 198.69283 461.32602 198.32471 c
461.32602 198.24185 461.24396 197.95502 461.08063 197.46342 c
460.91647 196.97182 460.87506 196.48021 460.91647 195.78307 c
460.91647 193.36647 461.03918 191.60326 461.36667 188.81776 c
462.00735 188.55774 l
464.51239 187.53304 466.35184 186.67181 468.47528 185.19408 c
468.74228 185.00609 l
469.12845 184.73759 469.18716 184.57573 469.02203 184.21617 c
468.98846 184.14636 l
468.37415 182.87633 467.79971 181.85092 467.10413 180.82629 c
466.98062 180.62152 466.85794 180.53946 466.73444 180.53946 c
466.61172 180.53946 466.48825 180.62152 466.32489 180.78642 c
464.52185 182.34409 463.00562 183.24445 461.32602 184.22765 c
461.32602 180.13069 458.37561 178.24478 453.70422 178.24478 c
449.19617 178.24478 446.16449 180.53946 446.16449 184.0643 c
446.16449 187.62823 449.11487 190.04639 453.74564 190.04639 c
454.05444 190.0442 l
454.81348 190.03349 455.83524 189.97946 456.98209 189.80098 c
456.73669 192.42313 456.65384 194.92334 456.61398 196.84833 c
456.59564 197.29781 l
456.55655 198.1526 456.49606 198.77533 456.28574 199.75809 c
h
687.22845 213.2814 m
687.70526 213.26321 l
689.82001 213.17418 691.51056 212.98854 692.41675 212.73535 c
692.51422 212.70695 l
692.96515 212.58347 693.17072 212.37869 693.17072 212.05043 c
693.17072 211.7636 693.04724 211.51819 692.88385 211.23135 c
692.76764 210.99965 692.68744 210.40585 692.67841 209.65327 c
692.67755 204.96165 l
694.44073 205.20786 696.20239 205.49469 697.92261 205.86359 c
698.41577 205.98628 698.62054 205.905 698.66199 205.49469 c
698.82532 204.47006 698.90741 203.48685 698.98865 202.42159 c
699.0293 201.88855 698.82532 201.7252 698.45563 201.68457 c
696.4892 201.31488 694.68695 201.06947 692.80182 200.8647 c
692.84247 194.55437 l
692.88263 190.8597 692.26648 187.66405 691.14661 185.26956 c
691.04016 185.04742 l
689.77014 182.34401 687.72009 180.17126 685.17999 178.69724 c
684.72906 178.40962 684.4422 178.32755 684.1554 178.32755 c
684.0321 178.32843 l
683.78064 178.33412 683.62 178.37685 683.33551 178.69724 c
682.59851 179.35217 681.5332 180.04778 680.13892 180.70428 c
683.992 182.75276 685.83575 184.63789 687.06512 187.50623 c
687.96552 189.59613 688.37579 192.38162 688.33521 196.64427 c
688.29376 200.37311 l
687.21509 200.29471 l
685.59143 200.18263 684.35834 200.12769 683.37695 200.12769 c
683.08197 200.11542 l
682.37445 200.09036 681.52698 200.09036 680.42377 200.11542 c
679.93494 200.12769 l
679.36047 200.12769 679.03381 200.33168 678.99316 200.78186 c
678.82825 201.60172 678.74695 202.70842 678.54065 204.51147 c
679.94165 204.3607 681.79486 204.3138 683.26367 204.30748 c
683.62238 204.30672 l
684.77045 204.30672 686.69543 204.34813 688.17181 204.47006 c
688.08899 206.51854 688.08899 208.36302 687.92566 209.91989 c
687.86865 210.40228 l
687.72803 211.55173 687.59052 212.3049 687.22845 213.2814 c
h
315.33441 213.93564 m
317.13748 212.87038 318.69434 211.8051 319.84247 210.8219 c
320.04724 210.65855 320.16995 210.33029 320.16995 210.16695 c
320.16995 209.8257 319.99545 209.59035 319.67908 209.42645 c
319.59705 209.38695 l
319.10468 209.14154 318.49036 208.77342 317.62985 207.95357 c
316.83136 207.23569 l
313.44479 204.17831 309.36475 200.33514 306.44257 197.30008 c
306.29718 197.11862 l
306.03091 196.77904 305.91031 196.57367 305.91031 196.39815 c
305.91031 196.15196 306.07446 195.94797 306.44257 195.66113 c
311.76971 191.80959 317.30161 187.34296 321.68616 182.75284 c
321.84952 182.54807 321.97299 182.38316 321.97299 182.21982 c
321.97299 182.05647 321.89093 181.93298 321.68616 181.72821 c
320.74362 180.70436 319.55563 179.51482 318.85849 178.90129 c
318.61307 178.69653 318.44894 178.57304 318.28558 178.57304 c
318.12146 178.57304 317.99875 178.69653 317.79321 178.94272 c
313.18906 184.10187 308.73819 188.26349 303.39752 192.39322 c
302.87787 192.7928 l
301.32098 193.98 300.70667 194.88191 300.70667 196.2348 c
300.70667 197.48531 301.33853 198.35185 302.44034 199.54672 c
302.71371 199.84015 l
305.90686 203.2948 309.03107 206.44208 312.24341 209.90932 c
313.1218 210.86333 l
314.22849 212.05052 314.8436 212.9118 315.33441 213.93564 c
h
725.69733 212.95284 m
726.10767 212.95284 726.35382 212.82935 726.64069 212.62457 c
727.86932 211.68279 728.68915 210.86293 729.38556 210.00243 c
729.71381 209.63431 729.83569 209.34747 729.83569 209.01923 c
729.83569 208.63553 729.62195 208.28996 729.22681 208.0791 c
729.13934 208.03601 l
728.44373 207.70776 728.11548 207.42093 727.33704 206.72455 c
724.34521 203.81558 721.6004 200.94724 718.48584 197.95541 c
718.52728 197.8327 l
720.82196 199.14417 722.74695 199.6772 725.04236 199.6772 c
731.02448 199.6772 735.20428 195.74203 735.20428 189.84201 c
735.20428 182.99864 729.67236 178.61485 720.90247 178.61485 c
715.74023 178.61485 712.62567 180.82668 712.62567 184.63837 c
712.62567 187.38243 715.20721 189.63724 718.40381 189.63724 c
722.25531 189.63724 725.0838 187.58876 726.10767 183.65515 c
728.97601 184.96584 730.28748 186.76891 730.28748 189.88264 c
730.28748 193.61227 727.66528 196.07028 723.85364 196.07028 c
720.45227 196.07028 716.68359 194.55405 713.36346 191.72714 c
712.70349 191.13531 712.05603 190.50516 711.40009 189.85123 c
709.79877 188.24371 l
709.51196 187.95688 709.30719 187.79353 709.10321 187.79353 c
708.93829 187.79353 708.73352 187.91545 708.4881 188.16086 c
707.62683 188.90022 706.72644 189.9655 706.06995 190.82521 c
705.82373 191.15269 705.948 191.44031 706.27393 191.76855 c
709.47052 194.34929 712.29822 196.97221 715.98566 200.82375 c
716.95001 201.82243 l
719.02875 203.98517 720.69812 205.79898 722.3374 207.82968 c
719.8786 207.3795 716.9704 206.80583 714.42877 206.27281 c
714.07214 206.18997 l
713.71295 206.10423 713.34192 206.00584 712.92249 205.85889 c
712.70856 205.7812 l
712.50378 205.7007 712.09344 205.57722 711.88867 205.57722 c
711.47833 205.57722 711.19232 205.7812 710.98676 206.27281 c
710.88995 206.46448 l
710.44513 207.37431 710.08881 208.5184 709.55334 210.69801 c
710.78198 210.53467 712.13489 210.53467 713.36346 210.61752 c
715.86371 210.86293 719.46906 211.39595 722.66565 212.00948 c
723.01843 212.08221 l
723.8775 212.26382 724.55823 212.44389 724.91888 212.62457 c
725.12366 212.74806 725.49255 212.95284 725.69733 212.95284 c
h
542.67114 212.95284 m
543.08142 212.95284 543.32764 212.82935 543.61444 212.62457 c
544.84308 211.68279 545.66296 210.86293 546.35931 210.00243 c
546.68756 209.63431 546.80951 209.34747 546.80951 209.01923 c
546.80951 208.63553 546.5957 208.28996 546.20056 208.0791 c
546.1131 208.03601 l
545.41754 207.70776 545.08929 207.42093 544.31085 206.72455 c
541.31903 203.81558 538.57416 200.94724 535.45966 197.95541 c
535.50104 197.8327 l
537.79572 199.14417 539.7207 199.6772 542.01617 199.6772 c
547.99823 199.6772 552.17804 195.74203 552.17804 189.84201 c
552.17804 182.99864 546.64612 178.61485 537.87622 178.61485 c
532.71399 178.61485 529.59949 180.82668 529.59949 184.63837 c
529.59949 187.38243 532.18097 189.63724 535.37756 189.63724 c
539.22913 189.63724 542.05762 187.58876 543.08142 183.65515 c
545.94977 184.96584 547.26123 186.76891 547.26123 189.88264 c
547.26123 193.61227 544.6391 196.07028 540.82739 196.07028 c
537.42603 196.07028 533.65735 194.55405 530.33728 191.72714 c
529.28131 190.78023 528.25745 189.73514 527.1795 188.65169 c
526.77258 188.24371 l
526.48572 187.95688 526.28094 187.79353 526.07697 187.79353 c
525.91205 187.79353 525.70728 187.91545 525.46185 188.16086 c
524.60059 188.90022 523.70026 189.9655 523.0437 190.82521 c
522.79755 191.15269 522.92181 191.44031 523.24768 191.76855 c
526.44427 194.34929 529.27197 196.97221 532.95941 200.82375 c
533.92377 201.82243 l
536.00256 203.98517 537.67194 205.79898 539.31116 207.82968 c
536.85236 207.3795 533.94415 206.80583 531.40253 206.27281 c
531.04596 206.18997 l
530.68677 206.10423 530.31573 206.00584 529.89624 205.85889 c
529.68231 205.7812 l
529.47754 205.7007 529.0672 205.57722 528.86243 205.57722 c
528.45215 205.57722 528.16608 205.7812 527.96051 206.27281 c
527.46893 207.21616 527.10083 208.36272 526.52716 210.69801 c
527.75574 210.53467 529.10864 210.53467 530.33728 210.61752 c
532.83746 210.86293 536.44281 211.39595 539.6394 212.00948 c
539.99225 212.08221 l
540.85126 212.26382 541.53198 212.44389 541.8927 212.62457 c
542.09747 212.74806 542.46637 212.95284 542.67114 212.95284 c
h
352.18033 212.95284 m
352.58987 212.95284 352.83606 212.82935 353.12289 212.62457 c
354.35229 211.68279 355.17218 210.86293 355.86853 210.00243 c
356.19681 209.63431 356.31949 209.34747 356.31949 209.01923 c
356.31949 208.63553 356.10571 208.28996 355.70993 208.0791 c
355.62234 208.03601 l
354.92676 207.70776 354.59851 207.42093 353.82007 206.72455 c
350.82901 203.81558 348.08337 200.94724 344.96887 197.95541 c
345.00949 197.8327 l
347.30496 199.14417 349.23071 199.6772 351.5246 199.6772 c
357.50748 199.6772 361.68729 195.74203 361.68729 189.84201 c
361.68729 182.99864 356.15536 178.61485 347.38623 178.61485 c
342.22324 178.61485 339.1087 180.82668 339.1087 184.63837 c
339.1087 187.38243 341.69022 189.63724 344.88681 189.63724 c
348.73911 189.63724 351.56604 187.58876 352.58987 183.65515 c
355.45822 184.96584 356.76968 186.76891 356.76968 189.88264 c
356.76968 193.61227 354.14752 196.07028 350.33664 196.07028 c
346.93527 196.07028 343.1658 194.55405 339.8465 191.72714 c
338.65851 190.66187 337.51117 189.47234 336.2818 188.24371 c
335.99496 187.95688 335.7894 187.79353 335.58542 187.79353 c
335.4213 187.79353 335.21652 187.91545 334.9711 188.16086 c
334.10983 188.90022 333.20868 189.9655 332.55295 190.82521 c
332.30676 191.15269 332.43024 191.44031 332.75772 191.76855 c
335.95352 194.34929 338.78201 196.97221 342.46863 200.82375 c
343.43277 201.82243 l
345.5112 203.98517 347.18115 205.79898 348.8204 207.82968 c
346.3624 207.3795 343.45264 206.80583 340.91177 206.27281 c
340.55518 206.18997 l
340.19598 206.10423 339.82495 206.00584 339.40549 205.85889 c
339.19156 205.7812 l
338.98599 205.7007 338.57645 205.57722 338.37167 205.57722 c
337.96216 205.57722 337.67453 205.7812 337.47055 206.27281 c
337.37363 206.46448 l
336.92807 207.37431 336.57108 208.5184 336.03638 210.69801 c
337.26498 210.53467 338.61789 210.53467 339.8465 210.61752 c
342.34595 210.86293 345.95206 211.39595 349.14865 212.00948 c
349.50146 212.08221 l
350.3605 212.26382 351.04123 212.44389 351.40192 212.62457 c
351.60745 212.74806 351.97559 212.95284 352.18033 212.95284 c
h
749.88342 185.9084 m
747.95685 185.9084 746.48206 184.43359 746.48206 182.50703 c
746.48206 180.58049 747.95685 179.10568 749.88342 179.10568 c
751.8092 179.10568 753.284 180.58049 753.284 182.50703 c
753.284 184.43359 751.8092 185.9084 749.88342 185.9084 c
h
491.01877 213.28108 m
491.55325 213.16666 l
493.35257 212.77698 494.43924 212.48909 495.93637 211.92821 c
496.34592 211.80472 496.5921 211.47646 496.5921 211.10912 c
496.5921 210.90436 496.50925 210.69801 496.3045 210.49403 c
495.89496 209.961 495.69019 209.51082 495.48541 208.93637 c
494.95239 207.25758 494.54205 205.73978 494.00983 204.01956 c
495.11652 204.14227 496.34592 204.18291 497.28769 204.18291 c
501.0986 204.18291 503.14865 201.51935 503.14865 196.27428 c
503.14865 191.84906 502.32721 186.39922 500.93524 183.44882 c
499.74805 180.82668 497.78009 179.59727 495.40335 179.59727 c
493.51813 179.59727 492.15976 179.78534 491.25668 180.16216 c
491.14148 180.21237 l
490.64987 180.41714 490.40448 180.74539 490.40448 181.35892 c
490.35907 181.84378 l
490.25278 182.9606 490.1272 183.98752 489.62524 185.17061 c
491.46973 184.3101 493.06802 184.10533 494.33807 184.10533 c
495.69019 184.10533 496.3045 184.59694 496.96024 186.2773 c
497.8215 188.57196 498.55853 192.46416 498.55853 196.48061 c
498.55612 196.80289 l
498.51562 199.41687 497.95618 200.2493 496.22321 200.2493 c
495.23923 200.2493 493.96918 200.12738 492.78122 199.96246 c
492.42261 198.92642 l
489.86685 191.59245 487.59808 186.18568 484.54431 180.70398 c
484.29813 180.17172 483.97064 180.08888 483.47903 180.33507 c
483.26834 180.44449 l
482.47165 180.87094 481.10019 181.72632 480.65134 182.13736 c
480.44656 182.34369 480.32388 182.50703 480.32388 182.75244 c
480.32388 182.87672 480.3645 183.04007 480.48801 183.20341 c
483.76511 188.90022 485.89642 193.24258 487.98633 199.2661 c
487.36209 199.168 l
486.04196 198.95578 484.92911 198.7473 483.97064 198.57051 c
482.90536 198.36417 482.24963 198.11876 481.71661 197.91399 c
481.14294 197.70923 480.65134 197.79207 480.40594 198.44624 c
480.03705 199.39037 479.58606 200.8644 479.13589 202.66747 c
480.93817 202.66747 482.74124 202.79094 484.54431 202.9543 c
486.26532 203.11765 487.78156 203.32397 489.37985 203.56938 c
489.52478 204.09268 l
490.07959 206.12498 490.34369 207.44533 490.60846 208.73239 c
490.814 209.961 491.01877 211.5593 491.01877 213.28108 c
h
633.37494 212.78987 m
635.34296 212.78987 637.22809 212.6656 638.74353 212.29671 c
639.23511 212.174 639.48132 211.97002 639.48132 211.64175 c
639.48132 211.06731 639.19446 210.49364 639.19446 209.91997 c
639.19446 209.10168 639.31793 208.11691 639.39844 207.17513 c
639.76813 204.30679 640.17688 202.25832 640.7099 200.12698 c
642.23425 200.9467 l
643.5929 201.67462 644.83844 202.33565 646.52869 203.24152 c
647.7182 203.9371 648.70142 204.63504 649.35638 205.45334 c
650.66705 204.10202 651.73309 202.66707 652.34821 201.60179 c
652.51154 201.35638 652.63501 201.02814 652.63501 200.7413 c
652.63501 200.33176 652.38879 200.00349 651.81512 199.923 c
650.58655 199.71667 649.19299 199.22507 647.88153 198.69203 c
644.35828 197.25865 641.07959 195.74164 638.25269 193.89949 c
634.6864 191.56184 633.41638 189.63763 633.41638 187.71107 c
633.41638 185.36929 635.04767 184.29993 639.99457 184.26898 c
640.21832 184.2683 l
644.66498 184.2683 648.99579 184.61522 652.13062 185.15846 c
652.43024 185.21164 l
652.88043 185.29292 653.08521 185.21164 653.16803 184.72003 c
653.37201 183.61334 653.49554 182.13776 653.57678 180.90913 c
653.61823 180.45818 653.33136 180.25418 652.83978 180.21275 c
649.11017 179.72116 645.83307 179.59767 640.62939 179.59767 c
632.88336 179.59767 628.78638 182.13776 628.78638 187.46489 c
628.78638 192.01436 631.77667 195.00462 636.57153 198.03787 c
635.64618 201.00745 634.9389 204.44849 634.51678 207.47417 c
634.37189 208.54341 l
634.10645 210.43457 633.82867 211.73361 633.37494 212.78987 c
h
596.65259 213.15752 m
598.61823 213.15752 600.50415 213.0356 602.01959 212.66592 c
602.51276 212.54243 602.75818 212.33766 602.75818 212.0094 c
602.75818 211.4373 602.47131 210.86285 602.47131 210.28918 c
602.47131 209.46933 602.59326 208.48611 602.67609 207.54434 c
603.04498 204.67444 603.45453 202.62596 603.98755 200.49542 c
606.94824 202.08353 l
607.81537 202.54622 608.71863 203.02719 609.80627 203.60916 c
610.99347 204.3071 611.97668 205.00269 612.63318 205.82256 c
613.94464 204.47044 615.00995 203.03706 615.625 201.97101 c
615.78839 201.7256 615.91028 201.39734 615.91028 201.1105 c
615.91028 200.70097 615.66492 200.37271 615.09277 200.29065 c
613.86182 200.08588 612.46985 199.59427 611.15839 199.06203 c
607.63434 197.62708 604.35492 196.11086 601.52795 194.26714 c
597.96405 191.93182 596.69403 190.00528 596.69403 188.08029 c
596.69403 185.69933 598.44128 184.67012 602.99292 184.63901 c
603.20831 184.63828 l
608.37134 184.63828 612.55115 185.00562 615.7063 185.58006 c
616.13293 185.65758 616.33929 185.58868 616.42871 185.16664 c
616.4433 185.08847 l
616.64966 183.98177 616.77161 182.50696 616.85364 181.27834 c
616.89508 180.8266 616.60822 180.62183 616.11664 180.58041 c
615.4989 180.50185 l
612.11987 180.08817 609.00763 179.97356 604.33392 179.96687 c
603.90472 179.96687 l
596.16101 179.96687 592.06244 182.50696 592.06244 187.83487 c
592.06244 192.382 595.05426 195.37384 599.84918 198.40552 c
598.92236 201.37509 598.21497 204.81682 597.79352 207.84195 c
597.64893 208.91138 l
597.38379 210.80353 597.10486 212.10126 596.65259 213.15752 c
h
669.07513 212.82965 m
670.96027 212.37869 672.31311 211.92851 673.37842 211.39627 c
674.03491 211.06801 674.28033 210.7804 674.28033 210.49356 c
674.2796 210.42046 l
674.27533 210.26686 674.24524 210.06158 674.03491 209.67371 c
673.82861 209.14146 673.54175 208.03633 673.25647 206.64201 c
672.8432 204.28981 l
672.22327 200.71565 671.69806 197.31113 671.69806 194.34959 c
671.70129 193.48666 l
671.7193 191.21782 671.81659 189.22281 672.10834 187.87434 c
673.133 190.04631 673.87 191.43983 674.85321 193.73451 c
675.42688 192.17763 675.79657 191.64461 676.20532 190.98965 c
676.45154 190.70282 676.57501 190.45663 676.57501 190.21121 c
676.57501 189.92438 676.49213 189.67819 676.08337 188.85912 c
675.88483 188.41339 l
674.93536 186.25992 674.62292 185.20326 674.23969 183.85945 c
674.15686 183.5312 674.11542 183.08102 674.11542 182.79419 c
674.11542 181.81097 l
674.11542 181.52414 673.99347 181.40065 673.58319 181.2373 c
672.42206 180.7339 671.7002 180.52328 670.89862 180.3974 c
670.75629 180.37602 l
670.26465 180.29396 670.05988 180.41745 669.81372 180.90906 c
668.50299 183.5312 667.3963 189.34993 667.3963 193.61258 c
667.40063 194.24054 l
667.44415 197.41118 667.8175 201.07784 668.62494 206.72487 c
668.70502 207.35204 l
668.91333 209.02473 669.07513 210.71631 669.07513 212.82965 c
h
276.97177 207.62578 m
284.30673 207.62578 289.0188 203.19978 289.0188 196.76752 c
289.0188 191.48155 286.75479 188.10272 282.03055 185.49704 c
281.80731 185.37546 l
278.3653 183.4489 275.1687 182.79395 271.39923 181.97409 c
270.57938 181.81075 270.2511 181.8506 269.96506 182.62904 c
269.47269 183.77716 268.44882 185.00577 267.09671 185.86705 c
267.74664 185.97693 l
272.74246 186.83348 275.52863 187.60263 278.20117 188.9003 c
281.68381 190.66116 283.85657 193.28409 283.85657 197.05435 c
283.85657 200.9059 281.35635 203.28262 276.80765 203.28262 c
273.12024 203.28262 268.24405 201.80626 262.01501 199.06218 c
261.32993 198.7238 l
260.34933 198.24463 259.5903 197.88828 259.18808 197.58582 c
258.61441 197.09421 258.28696 196.97229 258.08139 196.97229 c
257.67184 196.97229 257.34439 197.2177 256.8934 197.83279 c
256.15561 198.73393 255.13177 200.33223 254.27049 202.09309 c
254.55844 202.12779 l
256.11832 202.32608 257.59698 202.69037 261.27469 203.90862 c
262.92981 204.46199 l
268.91492 206.44978 273.77847 207.62578 276.97177 207.62578 c
h
416.57004 207.62578 m
423.90503 207.62578 428.61707 203.19978 428.61707 196.76752 c
428.61707 191.48155 426.35306 188.10272 421.62881 185.49704 c
421.40558 185.37546 l
417.96356 183.4489 414.76697 182.79395 410.9975 181.97409 c
410.17764 181.81075 409.8494 181.8506 409.56332 182.62904 c
409.07095 183.77716 408.04709 185.00577 406.69421 185.86705 c
407.34424 185.97693 l
412.34073 186.83348 415.12689 187.60263 417.79944 188.9003 c
421.2821 190.66116 423.45483 193.28409 423.45483 197.05435 c
423.45483 200.9059 420.95462 203.28262 416.40591 203.28262 c
412.71851 203.28262 407.84232 201.80626 401.61328 199.06218 c
400.76685 198.64507 l
399.86438 198.2052 399.16623 197.87148 398.78635 197.58582 c
398.21268 197.09421 397.88522 196.97229 397.67966 196.97229 c
397.27011 196.97229 396.94266 197.2177 396.4917 197.83279 c
395.75391 198.73393 394.73004 200.33223 393.86877 202.09309 c
394.15671 202.12779 l
395.74841 202.33014 397.25558 202.70529 401.10089 203.98428 c
402.52808 204.46199 l
408.51312 206.44978 413.37601 207.62578 416.57004 207.62578 c
h
453.70422 186.5231 m
451.65573 186.5231 450.05743 185.70325 450.05743 184.14636 c
450.05743 182.8349 451.20477 182.17917 453.5401 182.17917 c
455.75269 182.17917 457.10559 183.36794 457.10559 185.08815 c
457.10495 185.33771 l
457.103 185.56276 457.09521 185.72395 457.06415 185.908 c
456.08096 186.23627 454.97427 186.5231 453.70422 186.5231 c
h
718.56714 186.15381 m
717.37915 186.15381 716.60071 185.45744 716.60071 184.59694 c
716.60071 183.3269 717.7074 182.46562 720.16541 182.46562 c
720.90247 182.46562 721.43549 182.50703 722.05054 182.62897 c
721.51752 184.88377 720.28894 186.15381 718.56714 186.15381 c
h
535.54089 186.15381 m
534.35297 186.15381 533.57452 185.45744 533.57452 184.59694 c
533.57452 183.3269 534.68121 182.46562 537.13922 182.46562 c
537.87622 182.46562 538.40924 182.50703 539.02435 182.62897 c
538.49133 184.88377 537.2627 186.15381 535.54089 186.15381 c
h
345.05093 186.15381 m
343.86215 186.15381 343.08374 185.45744 343.08374 184.59694 c
343.08374 183.3269 344.18964 182.46562 346.64923 182.46562 c
347.38623 182.46562 347.91925 182.50703 348.53357 182.62897 c
348.00055 184.88377 346.77191 186.15381 345.05093 186.15381 c
h
446.94293 214.18184 m
447.8732 214.05089 l
449.3118 213.84515 450.6911 213.625 451.73703 213.32056 c
452.14734 213.24005 452.39276 212.99387 452.39276 212.70703 c
452.39276 212.37877 452.27005 212.17479 452.02463 211.92859 c
451.77844 211.60034 451.61432 211.23065 451.3689 210.41315 c
451.08206 209.42838 450.75381 208.15833 450.38492 206.92972 c
451.98322 207.09306 453.86835 207.46196 455.46585 207.83008 c
455.83554 207.95357 455.9989 207.95357 456.08096 207.50339 c
456.28574 206.47874 456.40842 205.24857 456.44986 204.1833 c
456.44986 203.81519 456.28574 203.73312 455.95825 203.6917 c
453.74564 203.24152 451.73703 202.95468 449.19617 202.58501 c
448.74854 201.41035 l
446.37033 195.2106 444.12805 190.04138 441.45786 185.43619 c
441.20624 185.00609 l
441.04211 184.72081 440.9194 184.59654 440.75607 184.59654 c
440.63257 184.59654 440.46844 184.6794 440.26367 184.80132 c
439.3219 185.37498 438.13315 186.23627 437.43677 186.89122 c
437.23199 187.05612 437.14914 187.17805 437.14914 187.34296 c
437.14914 187.46489 437.19058 187.62823 437.35471 187.83456 c
440.4278 192.91472 442.59976 197.21802 444.44269 202.13483 c
443.24512 202.07109 442.21722 202.0564 441.22852 202.05299 c
439.62646 202.05327 l
439.16949 202.05608 438.79431 202.065 438.09171 202.0934 c
437.68219 202.0934 437.60089 202.21689 437.51804 202.74991 c
437.31329 203.52835 437.19058 204.88045 437.10852 206.23178 c
437.85312 206.17989 l
439.09244 206.09781 439.91837 206.06844 440.9194 206.06844 c
441.46988 206.07028 l
442.81604 206.07986 443.96878 206.12907 445.63147 206.27319 c
446.12384 207.99498 446.41068 209.38695 446.69672 210.86333 c
446.94293 212.29671 446.94293 212.9118 446.94293 214.18184 c
h
507.61526 205.7812 m
510.39999 203.15906 512.90021 199.75771 514.41724 195.8241 c
514.5697 195.48051 514.54376 195.27855 514.3064 195.05299 c
514.25232 195.00423 l
513.5567 194.34929 511.99905 193.36607 511.17841 192.95575 c
510.76889 192.75099 510.36011 192.7924 510.23743 193.28401 c
508.59848 197.58574 506.46716 201.11058 503.51675 203.89607 c
504.1488 204.32651 l
504.90463 204.83885 505.71698 205.37471 506.5022 205.80728 c
506.83682 205.98598 l
507.1221 206.15088 507.32843 206.06804 507.61526 205.7812 c
h
462.18652 206.51862 m
464.60391 205.86366 467.84113 204.22472 470.21786 202.66707 c
470.46329 202.50372 470.58676 202.38023 470.58676 202.21689 c
470.58676 202.0934 470.54535 201.93005 470.42264 201.72528 c
470.04459 200.89275 469.38687 199.74654 468.83731 198.89832 c
468.70242 198.69283 l
468.57816 198.48805 468.45544 198.4052 468.33273 198.4052 c
468.21002 198.4052 468.12796 198.44662 467.96384 198.57011 c
465.54648 200.20827 462.59607 202.01289 459.48233 203.03674 c
459.72449 203.4696 l
460.3215 204.54782 460.85571 205.58147 461.32602 206.23178 c
461.57144 206.64211 461.77621 206.68352 462.18652 206.51862 c
h
508.50058 211.6857 m
508.55548 211.64137 l
509.82709 210.65816 511.30191 209.01923 512.45001 207.25758 c
512.61334 207.01138 512.61334 206.80583 512.32574 206.60106 c
510.60553 205.33102 l
510.3187 205.12625 510.11392 205.16768 509.90839 205.45296 c
508.67899 207.33807 507.36829 208.89574 505.77158 210.20642 c
507.94196 211.72421 l
508.13098 211.875 508.28604 211.8513 508.50058 211.6857 c
508.50058 211.6857 l
h
652.70172 211.76816 m
652.75696 211.72382 l
654.02856 210.73984 655.50336 209.10168 656.65149 207.33847 c
656.81482 207.09229 656.81482 206.88829 656.52722 206.68352 c
654.80701 205.41348 l
654.52014 205.20715 654.31537 205.24857 654.1098 205.5354 c
652.88043 207.42053 651.56976 208.9782 649.97144 210.28886 c
652.14343 211.8051 l
652.33246 211.95732 652.48615 211.93375 652.70172 211.76816 c
h
512.20386 214.30493 m
513.64789 213.21223 515.05505 211.67293 515.96423 210.29059 c
516.0968 210.08449 l
516.26013 209.83908 516.30078 209.5929 515.97253 209.34747 c
514.33514 208.07588 l
514.0069 207.82968 513.80054 207.95395 513.63879 208.19936 c
512.53052 209.961 511.22061 211.51788 509.54025 212.91141 c
511.58875 214.38622 l
511.83414 214.55113 511.9584 214.5097 512.20386 214.30493 c
h
656.40527 214.38661 m
657.8493 213.29465 659.25507 211.75539 660.16547 210.37305 c
660.29822 210.16695 l
660.46161 209.91997 660.50226 209.67378 660.17395 209.42838 c
658.53503 208.15833 l
658.20831 207.91214 658.00201 208.03641 657.83868 208.28181 c
656.73199 210.04346 655.42053 211.60034 653.7417 212.99387 c
655.79016 214.46867 l
656.03558 214.63202 656.15833 214.59216 656.40527 214.38661 c
h
534.85754 354.16299 m
557.40796 354.16299 574.42963 337.66733 574.42963 315.90784 c
574.42963 294.14832 557.40796 277.65265 534.85754 277.65265 c
512.30865 277.65265 495.28699 294.14832 495.28699 315.90784 c
495.28699 337.66733 512.30865 354.16299 534.85754 354.16299 c
h
707.35712 353.81207 m
731.7489 353.81207 742.8924 334.85995 742.8924 314.15323 c
742.8924 312.7933 742.8924 311.47714 742.76031 310.11722 c
742.67279 309.23953 742.23438 308.71277 741.35663 308.71277 c
691.73914 308.71277 l
693.75714 299.72009 699.63525 294.32339 709.63849 294.32339 c
715.69244 294.32339 720.6499 295.85916 726.57184 300.90417 c
727.18616 301.43094 727.84424 301.4747 728.50305 300.90417 c
738.1546 292.21786 l
738.81189 291.64734 738.94318 290.9017 738.32965 290.1991 c
731.09082 281.90826 721.65894 277.65265 709.37506 277.65265 c
687.26392 277.65265 671.20746 293.18231 671.20746 315.82028 c
671.20746 336.61456 686.03607 353.81207 707.35712 353.81207 c
h
626.45905 371.18466 m
627.30377 371.18466 627.82257 370.69763 627.86121 369.88058 c
627.86353 369.78098 l
627.86353 352.40839 l
643.65656 352.40839 l
644.50049 352.40839 645.01929 351.92136 645.05792 351.10364 c
645.06024 351.00391 l
645.06024 336.26364 l
645.06024 335.41971 644.57397 334.90094 643.75629 334.86227 c
643.65656 334.85995 l
627.86353 334.85995 l
627.86353 303.0097 l
627.86353 298.18433 630.01282 295.90292 634.26923 295.90292 c
637.42749 295.90292 640.01526 296.16632 643.13055 297.74509 c
644.06567 298.21298 644.75354 297.93936 644.79559 297.04425 c
644.79767 296.95569 l
644.79767 283.18066 l
644.79767 282.47882 644.53424 281.86371 643.8324 281.42526 c
640.01526 279.05713 634.97028 277.65265 628.38953 277.65265 c
617.02716 277.65265 608.91138 281.73242 607.3764 294.71808 c
607.20056 296.21008 607.1568 298.22809 607.1568 300.90417 c
607.1568 334.85995 l
599.78668 334.85995 l
598.94269 334.85995 598.42395 335.34625 598.38531 336.16394 c
598.383 336.26364 l
598.383 351.00391 l
598.383 351.84787 598.86926 352.36734 599.68695 352.40607 c
599.78668 352.40839 l
607.1568 352.40839 l
607.1568 369.78098 l
607.1568 370.62415 607.64313 371.14362 608.46075 371.18234 c
608.56049 371.18466 l
626.45905 371.18466 l
h
443.87027 354.16299 m
457.07556 354.16299 465.58679 346.74832 467.95572 334.33319 c
468.37793 332.13629 468.59723 329.53284 468.61288 326.2485 c
468.6138 280.81174 l
468.6138 279.93405 468.08701 279.40726 467.20932 279.40726 c
449.31073 279.40726 l
448.43304 279.40726 447.90628 279.93405 447.90628 280.81174 c
447.90628 320.47058 l
447.90628 330.20966 443.25598 335.38596 435.35907 335.38596 c
427.46292 335.38596 422.4617 330.29718 422.4617 320.47058 c
422.4617 280.81174 l
422.4617 279.93405 421.93494 279.40726 421.05801 279.40726 c
403.15866 279.40726 l
402.28098 279.40726 401.75497 279.93405 401.75497 280.81174 c
401.75497 351.00391 l
401.75497 351.88162 402.28098 352.40839 403.15866 352.40839 c
421.05801 352.40839 l
421.93494 352.40839 422.4617 351.88162 422.4617 351.00391 c
422.4617 342.66855 l
429.34885 351.88162 437.37784 354.16299 443.87027 354.16299 c
h
534.85754 336.26364 m
523.10046 336.26364 515.73035 326.78796 515.73035 315.90784 c
515.73035 305.02847 523.10046 295.552 534.85754 295.552 c
546.61536 295.552 553.98547 305.02847 553.98547 315.90784 c
553.98547 326.78796 546.61536 336.26364 534.85754 336.26364 c
h
707.35712 337.22888 m
698.97797 337.22888 693.58124 331.43826 691.29987 321.6109 c
722.75543 321.6109 l
721.30798 330.73642 716.30597 337.22888 707.35712 337.22888 c
h
W*
0 0 1000 563 rc
249.27049 376.18466 m
760.8241 376.18466 l
760.8241 171.60545 l
249.27049 171.60545 l
h
f
Q
q
288.04205 345.03778 m
288.04205 354.4259 l
288.04205 356.13675 288.13037 356.70731 288.39297 357.58499 c
289.09485 359.99768 291.46454 361.79605 294.27191 361.79605 c
297.07928 361.79605 299.44821 359.95392 300.15005 357.58499 c
300.41342 356.70731 300.50174 356.13675 300.50174 354.4259 c
300.50174 339.94904 l
300.50174 339.07132 300.50174 338.19443 300.3259 337.40427 c
299.84366 335.21118 297.86945 333.23618 295.6756 332.75394 c
294.88623 332.57889 294.00851 332.57889 293.13083 332.57889 c
278.65393 332.57889 l
276.94308 332.57889 276.37256 332.66641 275.49484 332.92981 c
273.12595 333.63165 271.28378 336.00058 271.28378 338.80795 c
271.28378 341.61609 273.12595 343.98502 275.49484 344.68686 c
276.37256 344.95026 276.94308 345.03778 278.65393 345.03778 c
288.04205 345.03778 l
h
339.63382 279.4068 m
261.98318 279.4068 l
261.98318 347.80139 l
261.98318 348.67908 262.29034 349.42468 262.90466 350.039 c
283.04083 370.17596 l
283.65515 370.78949 284.40076 371.09665 285.27847 371.09665 c
339.63382 371.09665 l
339.63382 279.4068 l
h
348.45221 386.53955 m
348.05753 386.58334 347.53073 386.62711 346.52176 386.62711 c
283.21591 386.62711 l
282.51486 386.62711 281.81302 386.58334 281.33002 386.53955 c
278.43433 386.27618 275.84576 384.91626 273.78403 382.85449 c
250.22536 359.29584 l
248.16437 357.23328 246.80367 354.64554 246.54106 351.74985 c
246.49652 351.26761 246.45274 350.56577 246.45274 349.86392 c
246.45274 272.51965 l
246.45274 271.51065 246.49652 270.98389 246.54106 270.5892 c
246.8912 267.29883 249.87444 264.31638 253.16481 263.96545 c
253.56029 263.9209 254.08627 263.87714 255.09528 263.87714 c
346.52176 263.87714 l
347.53073 263.87714 348.05753 263.9209 348.45221 263.96545 c
351.74258 264.31638 354.72583 267.29883 355.07675 270.5892 c
355.11972 270.98389 355.16428 271.51065 355.16428 272.51965 c
355.16428 377.98456 l
355.16428 378.99356 355.11972 379.52036 355.07675 379.91504 c
354.72583 383.20541 351.74258 386.18863 348.45221 386.53955 c
h
W*
0 0 1000 563 rc
241.45274 391.62711 m
360.16428 391.62711 l
360.16428 258.87714 l
241.45274 258.87714 l
h
f
ep
end
%%Trailer
%%EOF
